{"version":3,"sources":["components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","operation","setGridNull","rows","i","row","push","Array","from","col","useState","grid","setGrid","running","setRunning","box1","box2","runningRef","useRef","current","runSimulation","useCallback","gridCopy","j","neigh","forEach","x","y","newI","newJ","console","log","setTimeout","className","onClick","Math","random","map","customProduce","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee4b02fe.chunk.js","sourcesContent":["import {useCallback, useRef, useState} from \"react\";\n\nimport './styles/Grid.css'\n\n\nconst Grid = (props) => {\n\n    const operation = [\n        [0, 1],\n        [0, -1],\n        [1, -1],\n        [-1, 1],\n        [1, 1],\n        [-1, -1],\n        [1, 0],\n        [-1, 0]\n    ];\n\n    const setGridNull = () => {\n        const rows = [];\n        for (let i = 0; i < props.row; i++) {\n            rows.push(Array.from(Array(props.col), () => 0));\n        }\n        return rows;\n    }\n\n    const [grid, setGrid] = useState(() => {\n        return setGridNull();\n    });\n\n    const [running, setRunning] = useState(false);\n    const box1 = {\n        'width': '10px',\n        'height': '10px',\n        'backgroundColor': 'yellow',\n        'border': 'green 0.1px solid'\n    }\n    const box2 = {\n        'width': '10px',\n        'height': '10px',\n        'border': 'green 0.1vh solid'\n    }\n\n\n    const runningRef = useRef(running);\n    runningRef.current = running;\n\n    function customProduce(grid, x, y) {\n        let gridCopy = [];\n        for (let i = 0; i < props.row; i++) {\n            gridCopy[i] = [];\n            for (let j = 0; j < props.col; j++) {\n                if (x === i && y === j) {\n                    gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                } else {\n                    gridCopy[i][j] = grid[i][j];\n                }\n            }\n        }\n        return gridCopy;\n    }\n\n\n    const runSimulation = useCallback(() => {\n\n        if (!runningRef.current) {\n            return;\n        }\n\n        setGrid(grid => {\n\n            let gridCopy = [];\n\n            for (let i = 0; i < props.row; i++) {\n                gridCopy[i] = [];\n                for (let j = 0; j < props.col; j++) {\n\n                    gridCopy[i][j] = grid[i][j];\n                    // loop start\n                    let neigh = 0;\n\n                    operation.forEach(([x, y]) => {\n                        const newI = i + x;\n                        const newJ = j + y;\n                        if (newI >= 0 && newI < props.row && newJ >= 0 && newJ < props.col)\n                            neigh = neigh + grid[newI][newJ];\n                    });\n\n\n                    if (neigh < 2 || neigh > 3)\n                        gridCopy[i][j] = 0;\n                    else if (grid[i][j] === 0 && neigh === 3)\n                        gridCopy[i][j] = 1;\n\n                    // loop close\n\n                }\n            }\n            return gridCopy;\n        });\n\n        console.log('rendering')\n\n        setTimeout(runSimulation, 1);\n    }, []);\n\n\n    return (\n        <div className={'body'}>\n            <div className={'buttons'}>\n                <button onClick={() => {\n                    setRunning(!running);\n                    if (!running) {\n                        runningRef.current = true;\n                        runSimulation();\n                    }\n                }\n                }>{running ? 'Stop' : 'Start'}</button>\n\n                <button onClick={() => {\n                    setGrid(setGridNull);\n                }\n                }>Reset</button>\n                <button onClick={() => {\n                    let rows = [];\n                    for (let i = 0; i < props.row; i++) {\n                        rows.push(Array.from(Array(props.col), () => (\n                            Math.random() > 0.9 ? 1 : 0\n                        )))\n                    }\n                    setGrid(rows)\n                }\n                }>Random Preset</button>\n            </div>\n            <div className={'grid'}>\n                {\n                    grid.map((row, i) => row.map((col, j) => (<div key={`${i},${j}`} onClick={() => {\n                            setGrid(customProduce(grid, i, j));\n                        }\n                        } style={grid[i][j] ? box1 : box2}/>))\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Grid;","import {useState} from \"react\";\nimport Grid from \"./components/Grid\";\n\nimport './App.css';\n\n\n\nfunction App() {\n\n    const row = 100;\n    const col = 100;\n\n  return (\n      <>\n          <Grid row={row} col={col}/>\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}